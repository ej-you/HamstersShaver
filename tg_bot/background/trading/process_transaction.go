package trading

import (
	"fmt"
	"strconv"
	"time"

	telebot "gopkg.in/telebot.v3"

	apiClient "github.com/ej-you/HamstersShaver/tg_bot/api_client"
	customErrors "github.com/ej-you/HamstersShaver/tg_bot/errors"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
	"github.com/ej-you/HamstersShaver/tg_bot/settings"
)


const waitSeqnoIncrementTimes = 6


// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞ –æ—à–∏–±–∫—É
func editSentMessageToError(context *telebot.Context, sentTransMsg *telebot.Message) {
	(*context).Bot().Edit(sentTransMsg, "ü§∑‚Äç‚ôÇÔ∏è –£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üëÜ", keyboards.InlineKeyboardToHome)
}

// –æ–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ seqno –≤ —Ç–µ—á–µ–Ω–∏–µ ~30 —Å–µ–∫—É–Ω–¥
func waitSeqnoIncrement(seqnoBeforeTrans apiClient.AccountSeqno) error {
	var seqnoAfterTrans apiClient.AccountSeqno
	var seqnoErr error

	for i := 0; i < waitSeqnoIncrementTimes; i++ {
		// –ø–æ–ª—É—á–µ–Ω–∏–µ seqno –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		seqnoErr = apiClient.GetRequest("/api/account/get-seqno", nil, &seqnoAfterTrans)
		if seqnoErr == nil && seqnoAfterTrans.Seqno > seqnoBeforeTrans.Seqno { // NOT err
			break
		}
		time.Sleep(5*time.Second)
	}
	// –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏
	if seqnoErr != nil {
		return fmt.Errorf("wait seqno increment: %w", seqnoErr)
	}
	// –µ—Å–ª–∏ seqno —Ç–∞–∫ –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è
	if seqnoAfterTrans.Seqno == seqnoBeforeTrans.Seqno {
		return fmt.Errorf("wait seqno increment: %w", customErrors.InternalError("wait process transaction in mempool: timeout"))
	}
	return nil
}


// –≤—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
func ProcessTransaction(context *telebot.Context, sentTransMsg *telebot.Message, transInfo stateMachine.NewTransactionPreparation, transactionUUID string) {
	// –ø–æ–ª—É—á–µ–Ω–∏–µ seqno –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	var seqnoBeforeTrans apiClient.AccountSeqno
	err := apiClient.GetRequest("/api/account/get-seqno", nil, &seqnoBeforeTrans)
	if err != nil {
		editSentMessageToError(context, sentTransMsg)
		go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–æ–Ω–µ—Ç –≤–æ float64
	amountFloat64, _ := strconv.ParseFloat(transInfo.Amount, 64)
	// –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
	slippageInt, _ := strconv.Atoi(transInfo.Slippage)

	// POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
	postSendTransData := apiClient.JsonBody{
		"jettonCA": transInfo.JettonCA,
		"amount": amountFloat64,
		"slippage": slippageInt,
	}
	err = apiClient.PostRequest(fmt.Sprintf("/api/transactions/%s/send", transInfo.Action), &postSendTransData, nil)
	if err != nil {
		editSentMessageToError(context, sentTransMsg)
		go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ mempool"
	settings.InfoLog.Printf("Transaction %q: was sent to mempool", transactionUUID)
	(*context).Bot().Edit(sentTransMsg, "‚è∏Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ mempool üëÜ", keyboards.InlineKeyboardToHome)

	// –æ–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ seqno –≤ —Ç–µ—á–µ–Ω–∏–µ ~30 —Å–µ–∫—É–Ω–¥
	if err = waitSeqnoIncrement(seqnoBeforeTrans); err != nil {
		editSentMessageToError(context, sentTransMsg)
		go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
	settings.InfoLog.Printf("Transaction %q: seqno was incremented", transactionUUID)
	(*context).Bot().Edit(sentTransMsg, "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏... üëÜ", keyboards.InlineKeyboardToHome)

	// –æ–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	var waitedTransHash apiClient.WaitTransactionHash
	err = apiClient.SseRequest("/api/transactions/wait-next", &waitedTransHash)
	if err != nil {
		editSentMessageToError(context, sentTransMsg)
		go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–µ—ë –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏
	// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ö—ç—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
	time.Sleep(2*time.Second)
	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
	settings.InfoLog.Printf("Transaction %q: was finished", transactionUUID)
	(*context).Bot().Edit(sentTransMsg, "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëÜ", keyboards.InlineKeyboardToHome)

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ö—ç—à—É –æ—Ç–ª–æ–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	var endTransInfo apiClient.TransactionInfo
	getEndTransInfoParams := apiClient.QueryParams{
		"TransactionHash": waitedTransHash.Hash,
		"Action": transInfo.Action,
	}
	err = apiClient.GetRequest("/api/transactions/info", &getEndTransInfoParams, &endTransInfo)
	if err != nil {
		go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	getJettonInfoParams := apiClient.QueryParams{"MasterAddress": transInfo.JettonCA}
	// –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É AccountJetton –∏ –¥–ª—è —Å–ª—É—á–∞—è —Å JettonInfo, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∏–º–µ—é—Ç –æ–±—â–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è Symbol –∏ MasterAddress
	var jettonInfo apiClient.AccountJetton
	var beautyTransResult string
	var newJettonBalance string
	if endTransInfo.StatusOK == true {
		// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –µ—ë –∞–¥—Ä–µ—Å—É
		err = apiClient.GetRequest("/api/account/get-jetton", &getJettonInfoParams, &jettonInfo)
		if err != nil {
			go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
			return
		}
		beautyTransResult = "—É—Å–ø–µ—à–Ω–æ ‚úÖ"
		newJettonBalance = fmt.Sprintf("–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã: %s", jettonInfo.BeautyBalance)
	} else {
		// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ –ø–æ –µ—ë –∞–¥—Ä–µ—Å—É
		err = apiClient.GetRequest("/api/jettons/get-info", &getJettonInfoParams, &jettonInfo)
		if err != nil {
			go customErrors.BackgroundErrorHandler("transaction", transactionUUID, fmt.Errorf("processTransaction: %w", err), context)
			return
		}
		beautyTransResult = "–Ω–µ—É–¥–∞—á–Ω–æ ‚ùå"
	}

	// –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
	beautyAction := "–ø–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç"
	beautyWhatUsed := "TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
	if endTransInfo.Action == "cell" {
		beautyAction = "–ø—Ä–æ–¥–∞–∂–∞ –º–æ–Ω–µ—Ç"
		beautyWhatUsed = "–ú–æ–Ω–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
	}

	// —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	msgText := fmt.Sprintf(`üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–î–µ–π—Å—Ç–≤–∏–µ: %s
DEX-–±–∏—Ä–∂–∞: %s
–†–µ–∑—É–ª—å—Ç–∞—Ç: %s

–ú–æ–Ω–µ—Ç–∞: %s
–ê–¥—Ä–µ—Å –º–æ–Ω–µ—Ç—ã: %s
%s: %s

–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å TON: %s
%s
`,
		beautyAction,
		transInfo.DEX,
		beautyTransResult,

		jettonInfo.Symbol,
		jettonInfo.MasterAddress,
		beautyWhatUsed, transInfo.Amount,

		endTransInfo.EndBalance,
		newJettonBalance,
	)

	// –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	keyboards.SetTonviewerTransLink(endTransInfo.Hash)
	(*context).Send(msgText, keyboards.InlineKeyboardTonviewerTransLink)
}
