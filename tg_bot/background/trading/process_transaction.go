package trading

import (
	"fmt"
	"strconv"
	"time"

	telebot "gopkg.in/telebot.v3"

	apiClient "github.com/ej-you/HamstersShaver/tg_bot/api_client"
	customErrors "github.com/ej-you/HamstersShaver/tg_bot/errors"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
)


const waitSeqnoIncrementTimes = 6


// –≤—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
func ProcessTransaction(context telebot.Context, sentTransMsg *telebot.Message, transInfo stateMachine.NewTransactionPreparation) {
	// –ø–æ–ª—É—á–µ–Ω–∏–µ seqno –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	var seqnoBeforeTrans, seqnoAfterTrans apiClient.AccountSeqno
	err := apiClient.GetRequest("/api/account/get-seqno", nil, &seqnoBeforeTrans)
	if err != nil {
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–æ–Ω–µ—Ç –≤–æ float64
	amountFloat64, err := strconv.ParseFloat(transInfo.Amount, 64)
	if err != nil {
		internalErr := customErrors.InternalError("failed to parse amount to float value")
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %v: %w", err, internalErr), context)
		return
	}
	// –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
	slippageInt, err := strconv.Atoi(transInfo.Slippage)
	if err != nil {
		internalErr := customErrors.InternalError("failed to parse slippage to int value")
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %v: %w", err, internalErr), context)
		return
	}

	// POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
	postSendTransData := apiClient.JsonBody{Data: map[string]interface{}{
		"jettonCA": transInfo.JettonCA,
		"amount": amountFloat64,
		"slippage": slippageInt,
	}}
	err = apiClient.PostRequest(fmt.Sprintf("/api/transactions/%s/send", transInfo.Action), &postSendTransData, nil)
	if err != nil {
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %w", err), context)
		return
	}

	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ mempool"
	context.Bot().Edit(sentTransMsg, "‚è∏Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ mempool üëÜ", keyboards.InlineKeyboardToHome)

	// –æ–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ seqno –≤ —Ç–µ—á–µ–Ω–∏–µ ~30 —Å–µ–∫—É–Ω–¥
	var seqnoErr error
	for i := 0; i < waitSeqnoIncrementTimes; i++ {
		// –ø–æ–ª—É—á–µ–Ω–∏–µ seqno –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		seqnoErr = apiClient.GetRequest("/api/account/get-seqno", nil, &seqnoAfterTrans)
		if seqnoErr == nil && seqnoAfterTrans.Seqno > seqnoBeforeTrans.Seqno { // NOT err
			break
		}
		time.Sleep(5*time.Second)
	}
	// –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏
	if seqnoErr != nil {
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %w", err), context)
		return
	}
	// –µ—Å–ª–∏ seqno —Ç–∞–∫ –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è
	if seqnoAfterTrans.Seqno == seqnoBeforeTrans.Seqno {
		internalErr := customErrors.InternalError("wait process transaction in mempool: timeout")
		go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %w", internalErr), context)
		return
	}

	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
	context.Bot().Edit(sentTransMsg, "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏... üëÜ", keyboards.InlineKeyboardToHome)



	// –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	// transHash, err := tonApiSSE.SubscribeToNextTransaction(5*time.Minute)
	// if err != nil {
	// 	go customErrors.MainErrorHandler(fmt.Errorf("processTransaction: %w", err), context)
	// 	return
	// }


	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ö—ç—à—É –æ—Ç–ª–æ–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏



	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
	context.Bot().Edit(sentTransMsg, "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëÜ", keyboards.InlineKeyboardToHome)



	// –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

}
