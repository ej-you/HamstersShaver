package errors

import (
	"fmt"

	telebot "gopkg.in/telebot.v3"
	"github.com/pkg/errors"

	"github.com/ej-you/HamstersShaver/tg_bot/settings"
)


// —Å–æ–∑–¥–∞—ë–º –∑–¥–µ—Å—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
var inlineKeyboardToHome = func() *telebot.ReplyMarkup {
	inlineKeyboard := &telebot.ReplyMarkup{}
	var btn = inlineKeyboard.Data("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "to_home")

	inlineKeyboard.Inline(
		inlineKeyboard.Row(btn),
	)
	return inlineKeyboard
}()


// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
func MainErrorHandler(err error, context telebot.Context) {
	userId := context.Chat().ID

	restAPIErr := new(RestAPIError)
	restAPITimeoutErr := new(RestAPITimeoutError)
	redisErr := new(RedisError)
	DBErr := new(DBError)
	validateErr := new(ValidateError)
	internalErr := new(InternalError)
	accessErr := new(AccessError)

	var msgText string
	switch {
		case errors.As(err, accessErr):
			settings.InfoLog.Printf("USER BLOCKED: %v", err)
			return
		case errors.As(err, restAPIErr):
			settings.ErrorLog.Printf("REST API ERROR (user %d): %v", userId, err)
			msgText = fmt.Sprintf("üõ† –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ API:\n\n%v \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", restAPIErr)
		case errors.As(err, restAPITimeoutErr):
			settings.ErrorLog.Printf("REST API TIMEOUT ERROR (user %d): %v", userId, err)
			msgText = fmt.Sprintf("‚åõÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è API:\n\n%v \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", restAPITimeoutErr)

		case errors.As(err, redisErr):
			settings.ErrorLog.Printf("REDIS ERROR (user %d): %v", userId, err)
			msgText = fmt.Sprintf("‚òÅÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∫—ç—à–∞:\n\n%v \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", redisErr)
		case errors.As(err, DBErr):
			settings.ErrorLog.Printf("DB ERROR (user %d): %v", userId, err)
			msgText = fmt.Sprintf("üóÉ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ë–î:\n\n%v \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", DBErr)
		
		case errors.As(err, validateErr):
			context.Send("üò¨ –£–ø—Å—Å.. –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üí™")
			return

		case errors.As(err, internalErr):
			settings.ErrorLog.Printf("INTERNAL ERROR (user %d): %v", userId, err)
			msgText = fmt.Sprintf("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n\n%v \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", internalErr)
		default:
			settings.ErrorLog.Printf("UNKNOWN ERROR (user %d): %v", userId, err)
			msgText = "‚ò†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
	}
	context.Send(msgText, inlineKeyboardToHome)
}
