package handlers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	telebot "gopkg.in/telebot.v3"

	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
	"github.com/ej-you/HamstersShaver/tg_bot/services"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/settings"
)


// –∫–æ–º–∞–Ω–¥—ã: /home || /cancel
// –∫–Ω–æ–ø–∫–∏: to_home
func HomeHandler(context telebot.Context) error {
	var err error
	userId := services.GetUserID(context.Chat())

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
	userStateMachine := stateMachine.UserStateMachines.Get(userId)
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if err = userStateMachine.SetStatus("home"); err != nil {
		return err
	}
	// –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	if err = userStateMachine.ClearNewTransactionPreparation(); err != nil {
		return err
	}

	fullTonInfo, err := getTONInfo()
	if err != nil {
		settings.ErrorLog.Printf("ERROR FROM API: %v", err)
		msgText := fmt.Sprintf("üò¨ –û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON:\n\t%s", err.Error())
		return context.Send(msgText, keyboards.InlineKeyboardToHome)
	}

	return context.Send(homeGetMessageText(fullTonInfo), keyboards.InlineKeyboardMainMenu)
}


type tonInfo struct {
	BeautyBalance 	string `json:"beautyBalance"`
	PriceUSD 		float64 `json:"priceUsd"`
}


// –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TON —É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
func getTONInfo() (tonInfo, error) {
	var fullTonInfo tonInfo
	client := &http.Client{Timeout: 5*time.Second}

	// –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ TON
	req, err := http.NewRequest("GET", settings.RestApiHost+"/api/account/get-ton", nil)
	if err != nil {
		return fullTonInfo, fmt.Errorf("create get TON balance request error: %v", err)
	}
	// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	queryParams := req.URL.Query()
	queryParams.Add("api-key", settings.RestApiKey)
	req.URL.RawQuery = queryParams.Encode()
	// –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err := client.Do(req)
	defer resp.Body.Close()
	if err != nil {
		return fullTonInfo, fmt.Errorf("failed to get TON balance: %v", err)
	}
	// –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
	if err := json.NewDecoder(resp.Body).Decode(&fullTonInfo); err != nil {
		return fullTonInfo, fmt.Errorf("failed to decode answer from get TON balance response: %v", err)
	}

	// –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ TON
	req, err = http.NewRequest("GET", settings.RestApiHost+"/api/jettons/get-info", nil)
	if err != nil {
		return fullTonInfo, fmt.Errorf("create get TON info request error: %v", err)
	}
	// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	queryParams = req.URL.Query()
	queryParams.Add("api-key", settings.RestApiKey)
	queryParams.Add("MasterAddress", "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c")
	req.URL.RawQuery = queryParams.Encode()
	// –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err = client.Do(req)
	defer resp.Body.Close()
	if err != nil {
		return fullTonInfo, fmt.Errorf("failed to get TON info: %v", err)
	}
	// –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É TON –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
	if err := json.NewDecoder(resp.Body).Decode(&fullTonInfo); err != nil {
		return fullTonInfo, fmt.Errorf("failed to decode answer from get TON info response: %v", err)
	}

	return fullTonInfo, nil
}

// —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
func homeGetMessageText(fullTonInfo tonInfo) string {
	return fmt.Sprintf(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON: %s 
üíµ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON: %.2f$

‚ùóÔ∏è–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`, fullTonInfo.BeautyBalance, fullTonInfo.PriceUSD)

}
