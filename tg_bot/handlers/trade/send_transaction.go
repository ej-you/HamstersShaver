package trade

import (
	"errors"
	"fmt"

	"github.com/google/uuid"
	telebot "gopkg.in/telebot.v3"

	"github.com/ej-you/HamstersShaver/tg_bot/mongo"
	mongoSchemas "github.com/ej-you/HamstersShaver/tg_bot/mongo/schemas"
	
	backgroundTrading "github.com/ej-you/HamstersShaver/tg_bot/background/trading"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	
	customErrors "github.com/ej-you/HamstersShaver/tg_bot/errors"
	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
	"github.com/ej-you/HamstersShaver/tg_bot/services"
)


// –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func SendTransaction(context telebot.Context) error {
	var err error

	mongoDB := mongo.NewMongoDB()
	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–∑ –ë–î)
	var lastTransInfo mongoSchemas.Transaction
	err = mongoDB.GetLastTransaction(&lastTransInfo)
	if err != nil {
		dbNotFoundErr := new(customErrors.DBNotFoundError)
		// –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		if !errors.As(err, dbNotFoundErr) {
			return fmt.Errorf("SendTransaction: %w", err)
		}
	}
	// –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –Ω–µ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
	if err == nil && lastTransInfo.Finished == false { // NOT err
		return customErrors.LastTransNotFinishedError("last transaction not finished")
	}

	userId := services.GetUserID(context.Chat())
	// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
	userStateMachine := stateMachine.UserStateMachines.Get(userId)
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if err = userStateMachine.SetStatus("send_transaction"); err != nil {
		return fmt.Errorf("SendTransaction: %w", err)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	newTrans, err := userStateMachine.GetNewTransactionPreparation()
	if err != nil {
		return fmt.Errorf("SendTransaction: %w", err)
	}

	// —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
	newDBTransaction := mongoSchemas.Transaction{
		UserID: userId,
		ID: uuid.New(),
		Action: newTrans.Action,
		DEX: newTrans.DEX,
		JettonCA: newTrans.JettonCA,
		Finished: false,
	}
	if newTrans.Action == "cell" {
		newDBTransaction.UsedJettons = newTrans.Amount
	} else {
		newDBTransaction.UsedTON = newTrans.Amount
	}
	// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î
	if err := mongoDB.InsertOne(newDBTransaction); err != nil {
		return fmt.Errorf("SendTransaction: %w", err)
	}

	// —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	transMsg := fmt.Sprintf("‚ñ∂Ô∏è –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—à–µ... üëÜ\n(ID: %s)", newDBTransaction.ID.String())
	sentTransMsg, err := context.Bot().Send(context.Recipient(), transMsg, keyboards.InlineKeyboardToHome)
	if err != nil {
		return fmt.Errorf("SendTransaction: %w", err)
	}

	// –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ–Ω–µ
	go backgroundTrading.ProcessTransaction(&context, sentTransMsg, newTrans, newDBTransaction.ID)
	return nil
}
