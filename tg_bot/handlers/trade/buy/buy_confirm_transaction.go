package buy
// –Ω–æ–º–µ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ: 4

import (
	"fmt"
	"strings"
	"strconv"

	telebot "gopkg.in/telebot.v3"

	apiClient "github.com/ej-you/HamstersShaver/tg_bot/api_client"
	customErrors "github.com/ej-you/HamstersShaver/tg_bot/errors"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
	"github.com/ej-you/HamstersShaver/tg_bot/services"

	"github.com/ej-you/HamstersShaver/tg_bot/settings/constants"
)


func BuyConfirmTransactionHandler(context telebot.Context) error {
	var err error

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–æ–Ω–µ—Ç—ã –æ—Ç —é–∑–µ—Ä–∞
	jettonCA := strings.TrimSpace(context.Message().Text)

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
	userStateMachine := stateMachine.UserStateMachines.Get(services.GetUserID(context.Chat()))
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if err = userStateMachine.SetStatus("buy_confirm_transaction"); err != nil {
		return fmt.Errorf("BuyConfirmTransactionHandler: %w", err)
	}
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
	if err = userStateMachine.SetJettonCA(jettonCA); err != nil {
		return fmt.Errorf("BuyConfirmTransactionHandler: %w", err)
	}

	msgText := fmt.Sprintf("üèÅ –ê–¥—Ä–µ—Å –º–æ–Ω–µ—Ç—ã: %s \n\n–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", jettonCA)
	context.Send(msgText)

	// –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	return confirmNewTransaction(context, userStateMachine)
}


// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
func confirmNewTransaction(context telebot.Context, userStateMachine stateMachine.UserStateMachine) error {
	newTransInfo, err := userStateMachine.GetNewTransactionPreparation()
	if err != nil {
		return fmt.Errorf("BuyConfirmTransactionHandler: %w", err)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TON —É –∞–∫–∫–∞—É–Ω—Ç–∞
	var TONAccountInfo apiClient.TONInfo
	err = apiClient.GetRequest("/api/account/get-ton", nil, &TONAccountInfo)
	if err != nil {
		return fmt.Errorf("BuyConfirmTransactionHandler: %w", err)
	}

	// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª-–≤–æ TON –Ω–∞ –ø–æ–∫—É–ø–∫—É + –≥–∞–∑ –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ TON
	tonAmountFloat, _ := strconv.ParseFloat(newTransInfo.Amount, 64)
	tonBalanceFloat := services.ConvertBalanceToFloat64(TONAccountInfo.Balance, TONAccountInfo.Decimals)
	if (tonAmountFloat + constants.GasAmountFloat64) > tonBalanceFloat {
		internalErr := customErrors.InternalError("not enough TONs for create transaction")
		return fmt.Errorf("BuyConfirmTransactionHandler: balance - %s TON && TONs for transaction - %s: %w", TONAccountInfo.BeautyBalance, newTransInfo.Amount, internalErr)
	}

	// –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –º–æ–Ω–µ—Ç –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
	var buyPreRequestInfo apiClient.PreRequestBuyJetton
	getBuyPreRequestInfoParams := apiClient.QueryParams{Params: map[string]interface{}{
		"JettonCA": newTransInfo.JettonCA,
		"Amount": newTransInfo.Amount,
		"Slippage": newTransInfo.Slippage,
	}}
	err = apiClient.GetRequest("/api/transactions/buy/pre-request", &getBuyPreRequestInfoParams, &buyPreRequestInfo)
	if err != nil {
		return fmt.Errorf("BuyConfirmTransactionHandler: %w", err)
	}

	msgText := fmt.Sprintf(`‚è© –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç:

–ü–æ–∫—É–ø–∞–µ–º–∞—è –º–æ–Ω–µ—Ç–∞: %s
–ê–¥—Ä–µ—Å –º–æ–Ω–µ—Ç—ã: %s
DEX-–±–∏—Ä–∂–∞: %s

TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏: %s
–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: %s%%
–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üëá
`,
		buyPreRequestInfo.JettonSymbol,
		buyPreRequestInfo.JettonCA,
		newTransInfo.DEX,
		buyPreRequestInfo.UsedTON,
		newTransInfo.Slippage,
		buyPreRequestInfo.JettonsOut,
	)

	return context.Send(msgText, keyboards.InlineKeyboardConfirmNewTransaction)
}
