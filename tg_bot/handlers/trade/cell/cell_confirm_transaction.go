package cell
// –Ω–æ–º–µ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ: 4

import (
	"fmt"
	"strings"
	"time"

	telebot "gopkg.in/telebot.v3"

	apiClient "github.com/ej-you/HamstersShaver/tg_bot/api_client"
	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/keyboards"
	"github.com/ej-you/HamstersShaver/tg_bot/services"
)


func CellConfirmTransactionHandler(context telebot.Context) error {
	var err error
	userId := services.GetUserID(context.Chat())

	// –ø–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ)
	stringSlippage, err := services.ParseSlippageAmount(strings.TrimSpace(context.Message().Text))
	if err != nil {
		return fmt.Errorf("ConfirmTransactionHandler for user %s: %w", userId, err)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
	userStateMachine := stateMachine.UserStateMachines.Get(userId)
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if err = userStateMachine.SetStatus("cell_confirm_transaction"); err != nil {
		return fmt.Errorf("ConfirmTransactionHandler for user %s: %w", userId, err)
	}
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
	if err = userStateMachine.SetSlippage(stringSlippage); err != nil {
		return fmt.Errorf("ConfirmTransactionHandler for user %s: %w", userId, err)
	}

	msgText := fmt.Sprintf("üèÅ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è: %s%% \n\n–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...", stringSlippage)
	context.Send(msgText)

	// –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	return confirmNewTransaction(context, userStateMachine, userId)
}


// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func confirmNewTransaction(context telebot.Context, userStateMachine stateMachine.UserStateMachine, userId string) error {
	newTransInfo, err := userStateMachine.GetNewTransactionPreparation()
	if err != nil {
		return fmt.Errorf("ConfirmTransactionHandler for user %s: %w", userId, err)
	}

	// –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –º–æ–Ω–µ—Ç –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
	var cellPreRequestInfo apiClient.PreRequestCellJetton
	getCellPreRequestInfoParams := apiClient.QueryParams{Params: map[string]interface{}{
		"JettonCA": newTransInfo.JettonCA,
		"Amount": newTransInfo.Amount,
		"Slippage": newTransInfo.Slippage,
	}}
	err = apiClient.GetRequest("/api/transactions/cell/pre-request", &getCellPreRequestInfoParams, &cellPreRequestInfo, 5*time.Second)
	if err != nil {
		return fmt.Errorf("ConfirmTransactionHandler for user %s: %w", userId, err)
	}

	msgText := fmt.Sprintf(`üîÅ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –º–æ–Ω–µ—Ç:

–ú–æ–Ω–µ—Ç–∞: %s
–ê–¥—Ä–µ—Å –º–æ–Ω–µ—Ç—ã: %s
DEX-–±–∏—Ä–∂–∞: %s

–ú–æ–Ω–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: %s
–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: %s%%
–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %s

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ üëá
`,
		cellPreRequestInfo.JettonSymbol,
		cellPreRequestInfo.JettonCA,
		cellPreRequestInfo.DEX,
		cellPreRequestInfo.UsedJettons,
		newTransInfo.Slippage,
		cellPreRequestInfo.TONsOut,
	)

	return context.Send(msgText, keyboards.InlineKeyboardConfirmNewTransaction)
}
