package cell
// –Ω–æ–º–µ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ: 3

import (
	"fmt"
	"strings"

	telebot "gopkg.in/telebot.v3"

	stateMachine "github.com/ej-you/HamstersShaver/tg_bot/state_machine"
	"github.com/ej-you/HamstersShaver/tg_bot/services"
)


func CellSlippageHandler(context telebot.Context) error {
	var err error
	userId := services.GetUserID(context.Chat())

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
	userStateMachine := stateMachine.UserStateMachines.Get(userId)
	// –ø–æ–ª—É—á–µ–Ω–∏–µ CA –º–æ–Ω–µ—Ç—ã –∏–∑ –∫—ç—à–∞
	jettonCA, err := userStateMachine.GetJettonCA()
	if err != nil {
		return fmt.Errorf("CellSlippageHandler for user %s: %w", jettonCA)
	}

	// –ø–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏, –≤–≤–µ–¥—ë–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º
	jettonsAmount, err := services.ParseJettonsAmount(jettonCA, strings.TrimSpace(context.Message().Text))
	if err != nil {
		return fmt.Errorf("CellSlippageHandler for user %s: %w", userId, err)
	}

	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if err = userStateMachine.SetStatus("cell_slippage"); err != nil {
		return fmt.Errorf("CellSlippageHandler for user %s: %w", userId, err)
	}
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
	if err = userStateMachine.SetJettonsAmount(jettonsAmount); err != nil {
		return fmt.Errorf("CellSlippageHandler for user %s: %w", userId, err)
	}

	msgText := fmt.Sprintf(`ü´∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–Ω–µ—Ç: %s

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)`, jettonsAmount)

	return context.Send(msgText)
}
